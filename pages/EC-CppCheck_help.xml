<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta name="generator" content=
  "HTML Tidy for Windows (vers 25 March 2009), see www.w3.org" />
  <meta content="text/html; charset=us-ascii" http-equiv=
  "content-type" />

  <title>ElectricFlow Plugin for CppCheck</title>
  <link rel="stylesheet" href=
  "../../plugins/@PLUGIN_KEY@/pluginhelp.css" type="text/css"
  media="screen" />
</head>

<body>
  <div class="help">
    <h1>CppCheck</h1>

    <p>Plugin Version @PLUGIN_VERSION@</p>
    <hr style=
    "margin-left: -10px; margin-top: 10px; height: 1px; width: 100%; color: #5981BD;"
    noshade="noshade" />
	<p>Revised on July 1, 2015</p>	<h1>Contents</h1>	<ul>	<li><p><a href="#overview">Overview</a></p></li>	<li><p><a href="#procedures">Plugin Procedures</a></p></li>	<li><p><a href="#example">Examples and Use Cases</a></p></li>	<li><p><a href="#rns">Release Notes</a></p></li>	</ul>		<h1 id="overview">Overview</h1>
    <p>Cppcheck is an analysis tool for C/C++ code. Unlike C/C++
    compilers and many other analysis tools, this tool does not detect syntax
    errors. Cppcheck detects only the types of problems that 
    compilers normally fail to detect. Cppcheck minimizes false
    positives. </p>		<p>You should enable as many warnings as
    possible in your compiler. If you use Visual C++, you should
    use warning level 4. If you use GCC or another compiler, see the vendor documentation for information about warnings.<br /></p>
      <p>You can check non-standard code that includes various
      compiler extensions, inline assembly code, and so on. Cppcheck is compilable by any C++ compiler that handles the latest C++ standard.</p>
    <h2>CppCheck Links</h2>

    <p>More information can be found at <a href=
    "http://cppcheck.sourceforge.net/">this website</a>.</p>

    <h2>ElectricFlow Integration to CppCheck</h2>

    <p>This plugin calls the CppCheck tool's <b>cppcheck</b> command
    line and passes the user-provided parameters in order to
    analyze C/C++ code.<br /></p>

    <h2>Integrated Version</h2>

    <p>This plugin was developed and tested against version
    1.44.</p>

    <h1 id="procedures">Plugin Procedures</h1>

    <p>IMPORTANT: For all parameter descriptions below, required
    parameters are shown in <span class='required'>bold
    italics</span>.</p>
	<p>IMPORTANT: In the ElectricFlow UI, go to the Home page, open the Main Menu, and click <b>Admin</b> > <b>Plugins</b> to open the Plugin Manager.</p>
    <div id="runCppcheck"><a name='runCppcheck' id=
    "runCppcheck"></a>

    <h3>runCppcheck</h3>

    <p>The runCppcheck procedure creates and executes a command
    line from the parameters you provide in the procedure form.</p>

    <table class="grid">
      <thead>
        <tr>
          <th>Parameter</th>

          <th>Description</th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td class='required'>CppCheck installation path</td>

          <td>Path where the CppCheck script is located. The default will
          invoke cppcheck. (Required)</td>
        </tr>

        <tr>
          <td class='required'>Target to analyze</td>

          <td>Indicate Cppcheck's target(s). Cppcheck supports
          directories or source code files, and both must be
          properly double quoted. (Required) <p>Examples:<br /></p>
          To analyze all contents of the folder myprojectroot: 
          "E:/myprojectroot/"<br />
          To analyze two files: 
          "E:/myprojectroot/file1.cpp"
          "E:/myprojectroot/file2.cpp"</td>
        </tr>

        <tr>
          <td>Enable additional checks</td>

          <td>Enable additional checks. The available IDs
          are:<br />
          all—Enable all checks<br />
          exceptNew—Exception safety when using new<br />
          exceptRealloc—Exception safety when
          reallocating<br />
          style—Check coding style<br />
         unusedFunctions—Check for unused functions. Several
          IDs can be given, if separated with commas. (This
          is the command-line '--enable' option.)</td>
        </tr>

        <tr>
          <td>Verbosity</td>

          <td>If checked, this enables extra verbosity when running
          the analysis. (This is the command-line '-v' option.)</td>
        </tr>

        <tr>
          <td>Quiet mode</td>

          <td>If checked, this enables error-logging-only mode in
          the analysis. (This is the command-line '-q' option.)</td>
        </tr>

        <tr>
          <td>Force files</td>

          <td>If checked, this forces checking on files that have
          too many configurations. (This is the command-line '-f'
          option.)</td>
        </tr>

        <tr>
          <td>Report file name</td>

          <td>Indicate the filename of the output report.</td>
        </tr>

        <tr>
          <td>Output file as XML</td>

          <td>If checked, this prints the error log as an XML file.
          (This is the command-line '--xml' option.)</td>
        </tr>

        <tr>
          <td>Additional commands</td>

          <td>Provide any custom commands for the Cppcheck
          call.</td>
        </tr>

        <tr>
          <td>Working directory</td>

          <td>Indicate the desired working directory. Leave blank
          to use the default workspace.</td>
        </tr>
      </tbody>
    </table><img src=
    "../../plugins/@PLUGIN_KEY@/images/CppCheck-1.png" alt=
    "Form" /></div>
	<h1 id="example">Examples and Use Cases</h1>
    <p>This example calls CppCheck from
    ElectricFlow to perform C++ code analysis. In this example, we analyze xerces, which is a      validating XML parser written in C++. You can download the      xerces source code from <a href=      "http://xerces.apache.org/xerces-c/download.cgi">this      website.</a></p>

    <ol>		<li>Download xerces.</li>
      <li>Create
      the following structure under the <b>C</b> drive:<br />
      <img src="../../plugins/@PLUGIN_KEY@/images/Tree.png" alt=
      "Tree" /></li>

      <li>Create a procedure's step and
      fill in the parameters as follows:<br />
      <img src="../../plugins/@PLUGIN_KEY@/images/CppCheck-1.png"
      alt="Form" /></li>

      <li>Run the
      procedure and see the results.</li>

      <p>Following is a sample output report:<br />
      <img src="../../plugins/@PLUGIN_KEY@/images/CppCheck-2.png"
      alt="xmlReport" /></p>

      <p>Following is a sample log file:<br />
      <img src="../../plugins/@PLUGIN_KEY@/images/CppCheck-3.png"
      alt="logFile" /></p>
    </ol>

    <h1 id="rns">Release Notes</h1>	<h2>@PLUGIN_KEY@-2.0.5</h2>    <ul>        <li>ElectricCommander was renamed to ElectricFlow.</li>    </ul>	
    <h2>@PLUGIN_KEY@-2.0.4</h2>    <ul>        <li>Procedure names were changed in the step picker section.</li>    </ul>
    <h2>@PLUGIN_KEY@-2.0.3</h2>

    <ul>
        <li>Procedure names were changed in the step picker section.</li>
    </ul>
    
    <h2>@PLUGIN_KEY@-2.0.2</h2>
    
    <ul>
      <li>The Help page style was changed.</li>
    </ul>

    <h2>@PLUGIN_KEY@-2.0.0</h2>

    <ul>
      <li>XML parameter panels were added.</li>

      <li>More postp matchers were added.</li>

      <li>A default workspace issue was corrected.</li>
    </ul>
  </div>
</body>
</html>
